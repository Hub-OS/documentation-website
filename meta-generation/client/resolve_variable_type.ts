const COMPRESSED_VARIABLE_TYPES = [
  { type: "Namespace", list: ["namespace"] },
  {
    type: "Entity",
    list: [
      "entity",
      "spell",
      "player",
      "character",
      "living",
      "attacker",
      "defender",
      "owner",
      "aggressor",
    ],
  },
  { type: "EntityId", list: ["id", "entity_id", "target_id", "observer_id"] },
  { type: "EntityId[]", list: ["exclude_list"] },
  {
    type: "AttackContext",
    list: ["context"],
  },
  { type: "PlayerForm", list: ["form", "player_form"] },
  { type: "Augment", list: ["augment"] },
  { type: "CardSelectButton", list: ["button"] },
  { type: "StagedItem", list: ["staged_item"] },
  { type: "Component", list: ["component"] },
  { type: "Lifetime", list: ["lifetime"] },
  {
    type: "Element",
    list: ["element", "secondary_element", "element_a", "element_b"],
  },
  { type: "Element[]", list: ["element_weaknesses"] },
  { type: "Rank", list: ["rank"] },
  { type: "Input", list: ["input_query"] },
  { type: "AudioBehavior", list: ["audio_behavior"] },
  { type: "Animation", list: ["animation"] },
  { type: "Playback", list: ["playback"] },
  { type: "[number, number][]", list: ["frame_data"] },
  { type: "Color", list: ["color", "color_a", "color_b"] },
  { type: "ColorMode", list: ["color_mode"] },
  { type: "TextStyle", list: ["text_style"] },
  { type: "TextMetrics", list: ["text_metrics"] },
  { type: "Sprite", list: ["sprite"] },
  { type: "SpriteShaderEffect", list: ["sprite_shader_effect"] },
  { type: "SyncNode", list: ["sync_node"] },
  { type: "Team", list: ["team"] },
  { type: "Team|Entity", list: ["team_or_entity"] },
  { type: "Movement", list: ["movement"] },
  { type: "Direction", list: ["direction", "direction_a", "direction_b"] },
  { type: "Drag", list: ["drag"] },
  { type: "Encounter", list: ["encounter"] },
  { type: "Spawner", list: ["spawner"] },
  { type: "Mutator", list: ["mutator"] },
  { type: "Field", list: ["field"] },
  { type: "Tile", list: ["tile", "prev_tile", "dest_tile"] },
  { type: "Tile[]", list: ["tiles"] },
  { type: "TileState", list: ["tile_state"] },
  { type: "CustomTileState", list: ["custom_tile_state"] },
  { type: "Highlight", list: ["highlight"] },
  { type: "HitProps", list: ["hit_props"] },
  { type: "Hit", list: ["hit_flag"] },
  { type: "Hit | number", list: ["hit_flags", "flags", "hit_weaknesses"] },
  { type: "Status", list: ["status"] },
  { type: "DeckCard", list: ["deck_card"] },
  { type: "CardProperties", list: ["card_properties", "card"] },
  { type: "CardClass", list: ["card_class"] },
  { type: "Element", list: ["element"] },
  { type: "Action", list: ["action"] },
  { type: "ActionStep", list: ["action_step"] },
  { type: "ActionLockout", list: ["lockout"] },
  { type: "Attachment", list: ["attachment"] },
  { type: "DefenseRule", list: ["defense_rule"] },
  { type: "DefensePriority", list: ["defense_priority"] },
  { type: "DefenseOrder", list: ["defense_order"] },
  { type: "Defense", list: ["defense"] },
  { type: "IntangibleRule", list: ["intangible_rule"] },
  { type: "AuxProp", list: ["aux_prop"] },
  { type: "Compare", list: ["compare"] },
  { type: "table<Hit, number>", list: ["status_durations"] },
  {
    type: "number|nil",
    list: ["letter_spacing", "line_spacing", "min_glyph_width"],
  },
  { type: "boolean|nil", list: ["monospace"] },
  {
    type: "boolean",
    list: [
      "bool",
      "charged",
      "time_freeze",
      "enabled",
      "enable",
      "share",
      "never_flip",
      "loops",
      "do_once",
      "visible",
      "intangible",
      "conceal",
      "prevent_time_freeze_counter",
      "skip_time_freeze_intro",
      "can_boost",
      "can_charge",
      "won",
    ],
  },
  {
    type: "number",
    list: [
      "distance",
      "index",
      "deck_index",
      "player_index",
      "tile_width",
      "tile_height",
      "vel_x",
      "vel_y",
      "time",
      "frames",
      "endlag",
      "delay",
      "delta",
      "elapsed",
      "layer",
      "width",
      "height",
      "elevation",
      "health",
      "percentage",
      "progress",
      "damage",
      "boosted_damage",
      "recover",
      "size",
      "slot_count",
      "card_button_slot",
      "level",
      "level_increment",
      "increment",
      "increase",
      "strength",
      "duration",
      "amount",
      "limit",
      "count",
      "frame_index",
      "delta",
      "col",
      "row",
      "x",
      "y",
      "r",
      "g",
      "b",
      "a",
      "start_sample",
      "end_sample",
      "action_types",
    ],
  },
  {
    type: "string",
    list: [
      "text",
      "font_name",
      "emotion",
      "tag",
      "package_id",
      "description",
      "code",
      "state",
      "name",
      "origin_name",
      "short_name",
      "point_name",
      "path",
      "texture_path",
      "category",
      "animation_path",
      "expr",
    ],
  },
  { type: "string[]", list: ["texture_paths", "tags"] },
  { type: "fun()", list: ["callback"] },
  { type: "any", list: ["data"] },
];

const VARIABLE_TYPE_MAP: { [name: string]: string } = {};

for (const { type, list } of COMPRESSED_VARIABLE_TYPES) {
  for (const name of list) {
    VARIABLE_TYPE_MAP[name] = type;
  }
}

export default function resolveVariableType(name: string): string | undefined {
  return VARIABLE_TYPE_MAP[name];
}
