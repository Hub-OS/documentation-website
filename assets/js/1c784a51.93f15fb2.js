"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>_});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),y=i,_=u["".concat(s,".").concat(y)]||u[y]||d[y]||r;return n?a.createElement(_,o(o({ref:t},c),{},{components:n})):a.createElement(_,o({ref:t},c))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},o="Async",l={unversionedId:"server/lua-api/async",id:"server/lua-api/async",title:"Async",description:"If you want to use IO while players are connected, you'll want to use the Async API to prevent server hiccups.",source:"@site/docs/02-server/04-lua-api/13-async.md",sourceDirName:"02-server/04-lua-api",slug:"/server/lua-api/async",permalink:"/server/lua-api/async",draft:!1,editUrl:"https://github.com/Hub-OS/documentation-website/tree/master/docs/02-server/04-lua-api/13-async.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"serverSidebar",previous:{title:"Synchronization",permalink:"/server/lua-api/synchronization"},next:{title:"Misc",permalink:"/server/lua-api/misc"}},s={},p=[{value:"Promises",id:"promises",level:2},{value:"<code>Async.create_promise&lt;T&gt;(function(resolve))</code>",id:"asynccreate_promisetfunctionresolve",level:3},{value:"<code>Async.await(promise)</code>",id:"asyncawaitpromise",level:3},{value:"<code>Async.await(async_iterator)</code>",id:"asyncawaitasync_iterator",level:3},{value:"<code>Async.await_all(promises)</code>",id:"asyncawait_allpromises",level:3},{value:"<code>Async.create_scope&lt;T&gt;(function(): T)</code>",id:"asynccreate_scopetfunction-t",level:3},{value:"<code>Async.create_function&lt;T&gt;(function(...): T|nil)</code>",id:"asynccreate_functiontfunction-tnil",level:3},{value:"<code>Async.request(url, request_options?)</code>",id:"asyncrequesturl-request_options",level:3},{value:"<code>Async.download(path, url, request_options?)</code>",id:"asyncdownloadpath-url-request_options",level:3},{value:"<code>Async.read_file(path)</code>",id:"asyncread_filepath",level:3},{value:"<code>Async.write_file(path, content)</code>",id:"asyncwrite_filepath-content",level:3},{value:"<code>Async.poll_server(address)</code>",id:"asyncpoll_serveraddress",level:3},{value:"<code>Async.message_server(address, data)</code>",id:"asyncmessage_serveraddress-data",level:3},{value:"<code>Async.sleep(seconds)</code>",id:"asyncsleepseconds",level:3},{value:"<code>Async.message_player(player_id, message, texture_path?, animation_path?)</code>",id:"asyncmessage_playerplayer_id-message-texture_path-animation_path",level:3},{value:"<code>Async.message_player(player_id, message, textbox_options?)</code>",id:"asyncmessage_playerplayer_id-message-textbox_options",level:3},{value:"<code>Async.question_player(player_id, question, texture_path?, animation_path?)</code>",id:"asyncquestion_playerplayer_id-question-texture_path-animation_path",level:3},{value:"<code>Async.question_player(player_id, question, textbox_options?)</code>",id:"asyncquestion_playerplayer_id-question-textbox_options",level:3},{value:"<code>Async.quiz_player(player_id, option_a?, option_b?, option_c?, texture_path?, animation_path?)</code>",id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-texture_path-animation_path",level:3},{value:"<code>Async.quiz_player(player_id, option_a?, option_b?, option_c?, textbox_options?)</code>",id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-textbox_options",level:3},{value:"<code>Async.prompt_player(player_id, character_limit?, default_text?)</code>",id:"asyncprompt_playerplayer_id-character_limit-default_text",level:3},{value:"<code>Async.initiate_encounter(player_id, package_path, encounter_data?)</code>",id:"asyncinitiate_encounterplayer_id-package_path-encounter_data",level:3},{value:"<code>Async.initiate_pvp(player_1_id, player_2_id, package_path?, encounter_data?)</code>",id:"asyncinitiate_pvpplayer_1_id-player_2_id-package_path-encounter_data",level:3},{value:"<code>Async.initiate_netplay(player_ids, package_path?, encounter_data?)</code>",id:"asyncinitiate_netplayplayer_ids-package_path-encounter_data",level:3},{value:"BattleResults",id:"battleresults",level:2},{value:"RequestOptions",id:"requestoptions",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"async"},"Async"),(0,i.kt)("p",null,"If you want to use IO while players are connected, you'll want to use the Async API to prevent server hiccups.\nNote: paths in this section use system paths and not asset paths."),(0,i.kt)("h2",{id:"promises"},"Promises"),(0,i.kt)("p",null,"A promise is a table stand-in for an eventual value. It has an ",(0,i.kt)("inlineCode",{parentName:"p"},"and_then")," function, which accepts a callback that will eventually be called with the promised value or nil on failure. Most async functions will return a promise."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"promise.and_then(function(value)\n  print(value)\nend)\n")),(0,i.kt)("h3",{id:"asynccreate_promisetfunctionresolve"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.create_promise<T>(function(resolve))")),(0,i.kt)("p",null,"Returns a promise from a callback. A resolve function is passed to this callback, which calls functions passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"and_then")),(0,i.kt)("p",null,"This promise supports late calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"and_then")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local promise = Async.create_promise(function(resolve)\n  resolve(1, 2, 3)\nend)\n\npromise.and_then(print) -- outputs "1 2 3"\n')),(0,i.kt)("h3",{id:"asyncawaitpromise"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.await(promise)")),(0,i.kt)("p",null,"Can only be used within an async scope or coroutine."),(0,i.kt)("p",null,"Waits for a promise by providing a function to and_then and yielding until the function is called."),(0,i.kt)("p",null,"Returns the value passed by and_then"),(0,i.kt)("h3",{id:"asyncawaitasync_iterator"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.await(async_iterator)")),(0,i.kt)("p",null,"Retruns an iterator from an async iterator (an iterator which returns promises)."),(0,i.kt)("p",null,"Can only be used within a coroutine. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"Async.promisify()")," to let the server handle resuming the coroutine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- example with Async.await(async_iterator)\nlocal shop_items = {\n  { name = "a", price = 0 },\n  { name = "b", price = 0 }\n}\n\nNet:on("player_join", Async.create_function(function(event)\n  local emitter = Net.open_shop(event.player_id, )\n\n  -- events are automatically awaited\n  for event in Async.await(emitter:async_iter("shop_purchase")) do\n    print(event)\n  end\nend))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- example without Async.await(async_iterator)\nlocal shop_items = {\n  { name = "a", price = 0 },\n  { name = "b", price = 0 }\n}\n\nNet:on("player_join", Async.create_function(function(event)\n  local emitter = Net.open_shop(event.player_id)\n\n  for promise in emitter:async_iter("shop_purchase") do\n    -- each event must be awaited individually\n    local event = Async.await(promise)\n    print(event)\n  end\nend))\n')),(0,i.kt)("h3",{id:"asyncawait_allpromises"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.await_all(promises)")),(0,i.kt)("p",null,"Can only be used within an async scope or coroutine."),(0,i.kt)("p",null,"Takes a list of promises and returns a list of values."),(0,i.kt)("h3",{id:"asynccreate_scopetfunction-t"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.create_scope<T>(function(): T)")),(0,i.kt)("p",null,"Returns a promise, resolves to the return value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local promise = Async.create_scope(function()\n  Async.await(Async.sleep(5))\n\n  return "hi"\nend)\n\npromise.and_then(print) -- says "hi" after 5s\n')),(0,i.kt)("h3",{id:"asynccreate_functiontfunction-tnil"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.create_function<T>(function(...): T|nil)")),(0,i.kt)("p",null,"Returns a function that returns a promise, which resolves to the return value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local say_after = Async.create_function(function(message, delay)\n  Async.await(Async.sleep(delay)))\n\n  return message\nend)\n\nsay_after("hello", 5).and_then(print) -- says "hello" after 5s\nsay_after("world", 10).and_then(print) -- says "world" after 10s\n')),(0,i.kt)("h3",{id:"asyncrequesturl-request_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.request(url, request_options?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request_options"),": ",(0,i.kt)("a",{parentName:"li",href:"#requestoptions"},"RequestOptions"))),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"{ status, headers, body }?")),(0,i.kt)("h3",{id:"asyncdownloadpath-url-request_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.download(path, url, request_options?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request_options"),": ",(0,i.kt)("a",{parentName:"li",href:"#requestoptions"},"RequestOptions"))),(0,i.kt)("p",null,"Downloads a file straight to disk."),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the file was successfully saved, or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if the operation failed."),(0,i.kt)("h3",{id:"asyncread_filepath"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.read_file(path)")),(0,i.kt)("p",null,"Returns a promise that resolves to a string representing the bytes stored in the file."),(0,i.kt)("p",null,"An empty string is returned if reading failed."),(0,i.kt)("h3",{id:"asyncwrite_filepath-content"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.write_file(path, content)")),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the file was successfully saved, or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if the operation failed."),(0,i.kt)("h3",{id:"asyncpoll_serveraddress"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.poll_server(address)")),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"{}?")),(0,i.kt)("h3",{id:"asyncmessage_serveraddress-data"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.message_server(address, data)")),(0,i.kt)("p",null,"You will not know if this succeeds, the other server will need to reply. See ",(0,i.kt)("a",{parentName:"p",href:"/server/lua-api/events#server_message"},"server_message"),"."),(0,i.kt)("h3",{id:"asyncsleepseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.sleep(seconds)")),(0,i.kt)("p",null,"Returns a promise that resolves after the duration has passed."),(0,i.kt)("h3",{id:"asyncmessage_playerplayer_id-message-texture_path-animation_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.message_player(player_id, message, texture_path?, animation_path?)")),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncmessage_playerplayer_id-message-textbox_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.message_player(player_id, message, textbox_options?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"textbox_options"),": ",(0,i.kt)("a",{parentName:"li",href:"/server/lua-api/widgets#textboxoptions"},"TextboxOptions"))),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncquestion_playerplayer_id-question-texture_path-animation_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.question_player(player_id, question, texture_path?, animation_path?)")),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," for yes, ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," for no, and ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncquestion_playerplayer_id-question-textbox_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.question_player(player_id, question, textbox_options?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"textbox_options"),": ",(0,i.kt)("a",{parentName:"li",href:"/server/lua-api/widgets#textboxoptions"},"TextboxOptions"))),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," for yes, ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," for no, and ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-texture_path-animation_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.quiz_player(player_id, option_a?, option_b?, option_c?, texture_path?, animation_path?)")),(0,i.kt)("p",null,"Returns a promise that resolves to 0-2 for option a-c, or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-textbox_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.quiz_player(player_id, option_a?, option_b?, option_c?, textbox_options?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"textbox_options"),": ",(0,i.kt)("a",{parentName:"li",href:"/server/lua-api/widgets#textboxoptions"},"TextboxOptions"))),(0,i.kt)("p",null,"Returns a promise that resolves to 0-2 for option a-c, or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncprompt_playerplayer_id-character_limit-default_text"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.prompt_player(player_id, character_limit?, default_text?)")),(0,i.kt)("p",null,"Returns a promise that resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,i.kt)("h3",{id:"asyncinitiate_encounterplayer_id-package_path-encounter_data"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.initiate_encounter(player_id, package_path, encounter_data?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"encounter_data"),": anything that could be represented as JSON.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Read as second param in encounter_init for the encounter package")))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<BattleResults?>")),(0,i.kt)("h3",{id:"asyncinitiate_pvpplayer_1_id-player_2_id-package_path-encounter_data"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.initiate_pvp(player_1_id, player_2_id, package_path?, encounter_data?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"encounter_data"),": anything that could be represented as JSON.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Read as second param in encounter_init for the encounter package")))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<BattleResults?>[]")),(0,i.kt)("h3",{id:"asyncinitiate_netplayplayer_ids-package_path-encounter_data"},(0,i.kt)("inlineCode",{parentName:"h3"},"Async.initiate_netplay(player_ids, package_path?, encounter_data?)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"encounter_data"),": anything that could be represented as JSON.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Read as second param in encounter_init for the encounter package")))),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<BattleResults?>[]")),(0,i.kt)("h2",{id:"battleresults"},"BattleResults"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@class BattleResults\n---@field player_id string\n---@field health number\n---@field score number\n---@field time number\n---@field ran boolean\n---@field emotion number\n---@field turns number\n---@field allies { name: string, health: number }[]\n---@field enemies { name: string, health: number }[]\n---@field neutral { name: string, health: number }[]\n")),(0,i.kt)("h2",{id:"requestoptions"},"RequestOptions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@class RequestOptions\n---@field method? string\n---@field headers? table<string, string>\n---@field body? string\n")))}d.isMDXComponent=!0}}]);