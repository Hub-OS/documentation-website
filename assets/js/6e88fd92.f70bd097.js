"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(r,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const o={},s="Packages",l={unversionedId:"client/packages",id:"client/packages",title:"Packages",description:"Augments",source:"@site/docs/01-client/01-packages.md",sourceDirName:"01-client",slug:"/client/packages",permalink:"/client/packages",draft:!1,editUrl:"https://github.com/Hub-OS/documentation-website/tree/master/docs/01-client/01-packages.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"clientSidebar",next:{title:"Entity",permalink:"/client/lua-api/entity-api/entity"}},r={},p=[{value:"Augments",id:"augments",level:2},{value:"Encounters",id:"encounters",level:2},{value:"Characters",id:"characters",level:2},{value:"Cards",id:"cards",level:2},{value:"Libraries and Packs",id:"libraries-and-packs",level:2},{value:"Statuses",id:"statuses",level:2},{value:"Tile States",id:"tile-states",level:2},{value:"Players",id:"players",level:2},{value:"Resources",id:"resources",level:2}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"packages"},"Packages"),(0,i.kt)("h2",{id:"augments"},"Augments"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "augment" # must match\nid = "dev.konstinople.augment.Attack1.bn6" # must be unique\npast_ids = [] # optional, list of strings\nname = "Attack+1"\ndescription = "MegaBstr\\nAttck +1"\nlong_description = "" # optional\npreview_texture_path = "preview.png" # optional\nhealth_boost = 0 # optional\nattack_boost = 1 # optional\nrapid_boost = 0 # optional\ncharge_boost = 0 # optional\nmega_boost = 0 # optional\ngiga_boost = 0 # optional\nhand_size_boost = 0 # optional\n\n# optional, list of strings, custom\n# some tags will be automatically added: "BLOCK", "FLAT_BLOCK"\ntags = ["BUG"]\n\n## switch drive specific\n# valid slots: "Head" | "Arms" | "Body" | "Legs"\nslot = "Arms"\n\n## block specific\n# list of colors, case insensitive\n# valid colors: "red" | "green" | "blue" | "pink" | "yellow" | "white"\ncolors = ["pink", "red", "blue"]\nflat = false # optional, defaults to false\n# list of lists, 5x5, filled with 0 or 1s to represent the shape\nshape = [\n  [0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0]\n]\n# list of package ids\n# used when two augments of the same color touch on a grid\n# or when an augment on a grid is out of bounds\n# any package ids here must also be marked as a dependency\nbyproducts = []\nprevent_byproducts = false # optional, prevents all blocks from creating byproducts\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/entity-api/player#augment"},"Augment")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param augment Augment\nfunction augment_init(augment)\nend\n")),(0,i.kt)("h2",{id:"encounters"},"Encounters"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "encounter" # must match\nid = "com.discord.Konstinople#7692.cactikil" # must be unique\npast_ids = [] # optional, list of strings\nname = "Cactikil"\ndescription = \'Cactikil, known as "Sabotekoron" in Japan, is a cactus\'\nlong_description = "" # optional\npreview_texture_path = "preview.png"\n\n## recording specific\nrecording_path = "recording.dat"\nrecording_overrides = []\n\n# this section is optional\n[defines]\ncharacters = [\n  { id = "com.discord.Konstinople#7692.enemy.cactikil", path = "cactikil" },\n  { id = "com.discord.Konstinople#7692.enemy.cactroll", path = "cactroll" },\n  { id = "com.discord.Konstinople#7692.enemy.cacter", path = "cacter" },\n]\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/field-api/encounter"},"Encounter")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param encounter Encounter\nfunction encounter_init(encounter)\nend\n")),(0,i.kt)("h2",{id:"characters"},"Characters"),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/entity-api/character"},"Character")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param character Entity\nfunction character_init(character)\nend\n")),(0,i.kt)("h2",{id:"cards"},"Cards"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "card" # must match\nid = "com.discord.Konstinople#7692.card.AreaEater" # must be unique\npast_ids = [] # optional, list of strings\nname = "AreaEatr"\nicon_texture_path = "icon.png"\npreview_texture_path = "preview.png"\ndescription = "Beast steals panels!" # optional, used in preview\nlong_description = "Beast steals panels!" # optional, used in battle\ndamage = 100 # optional\n# "none" | "fire" | "aqua" | "elec" | "wood" | "sword" |\n# "wind" | "cursor" | "summon" | "plus" | "break"\nelement = "sword" # optional\nsecondary_element = "none" # optional\ncodes = [\'A\', \'O\', \'X\']\ncard_class = "giga" # optional, "standard" | "mega"| "giga" | "dark"\nregular_allowed = false # optional, defaults to true for "standard" cards\nlimit = 3 # optional, defaults to 5\n# optional, case insensitive\n# valid values:\n# "retainintangible" | "freeze" | "pierceinvis" | "flinch" | "shake" |\n# "paralyze" | "flash" | "pierceguard" | "impact" | "drag" | "bubble" |\n# "nocounter" | "root" | "blind" | "confuse" | "pierceground"\nhit_flags = ["impact", "flinch", "flash"]\ncan_boost = true # optional\ncan_charge = true # optional\ntime_freeze = true # optional\nskip_time_freeze_intro = false # optional\nprevent_freeze_counter = false # optional\nconceal = false # optional\ntags = ["NAVI"] # optional, list of strings, custom\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/attack-api/action"},"Action")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- optional implementation, called when package ids change on cards tied to a character\n-- ---@param entity Entity\n-- ---@param card_index number\n-- function card_mutate(entity, card_index)\n-- end\n\n---@param entity Entity\n---@param card_properties CardProperties\nfunction card_init(entity, card_properties)\n  local action = Action.new(entity, "PLAYER_IDLE")\n\n  -- note: returning nil instead of an Action will create a poof effect\n  return action\nend\n')),(0,i.kt)("h2",{id:"libraries-and-packs"},"Libraries and Packs"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "library" # accepts "library" and "pack"\nid = "com.example.library" # must be unique\npast_ids = [] # optional, list of strings\nname = "Example Library"\ndescription = "Example Library"\nlong_description = "" # optional\npreview_texture_path = "preview.png" # optional\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"May contain an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Can contain anything\n-- The return value will be passed to lua files using require(package_id)\nreturn "hello"\n')),(0,i.kt)("h2",{id:"statuses"},"Statuses"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "status" # must match\nid = "com.BN6.Statuses.Bubble"\npast_ids = [] # optional, list of strings\nname = "Bubble Status"\ndescription = "" # optional\nlong_description = "" # optional\npreview_texture_path = "preview.png" # optional\nflag_name = "Bubble" # register Hit.Bubble, up to 64 hit flags can exist\nblocks_flags = ["Freeze"] # prevents these other statuses from existing on an entity when self is applied\nblocked_by = []  # prevents self from existing on an entity when these other statuses are applied\nblocks_actions = true # prevents the player from using Actions and animating\nblocks_mobility = true # prevents the player from moving\ndurations = [90] # a list of durations for each supported level of the status\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/attack-api/status"},"Status")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param status Status\nfunction status_init(status)\n  -- apply\n  -- create components and sprites for graphics here\n  -- modify animation state, etc\n\n  status.on_delete_func = function(self)\n    -- clean up\n  end\nend\n")),(0,i.kt)("h2",{id:"tile-states"},"Tile States"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "tile_state" # must match\nid = "BattleNetwork6.TileStates.Grass"\npast_ids = [] # optional, list of strings\ncategory = "tile_state"\nname = "BN6 Grass Tile"\nstate_name = "Grass"\ntexture_path = "texture.png"\nanimation_path = "animation.animation"\nmax_lifetime = 60 # optional\nhide_frame = false # optional\nhide_body = false # optional\nhole = false # optional, affects tile:is_walkable()\ncleanser_element = "Fire" # optional, attacks matching this element will overwrite the state to TileState.Normal\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/field-api/custom-tile-state"},"CustomTileState")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param custom_tile_state CustomTileState\nfunction status_init(custom_tile_state)\n  custom_tile_state.on_entity_enter_func = function(self, entity, movement)\n    -- ...\n  end\nend\n")),(0,i.kt)("p",null,"Animation example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# prefix state names with "RED_" "BLUE_" "OTHER_" to add support for team differences\n# suffix with "_FLIPPED" to support perspective differences\n# if there\'s a universal state, just use "DEFAULT"\n\nanimation state="1"\nframe x="0" w="40" h="30"\n\nanimation state="2"\nframe x="40" w="40" h="30"\n\nanimation state="3"\nframe x="80" w="40" h="30"\n')),(0,i.kt)("h2",{id:"players"},"Players"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "player" # must match\nid = "com.discord.Konstinople#7692.player.Man" # must be unique\npast_ids = [] # optional, list of strings\nname = "Man"\ndescription = "Before he was Mega, he was Man"\nlong_description = "" # optional\nhealth = 1000\nicon_texture_path = "icon.png"\npreview_texture_path = "preview.png"\noverworld_animation_path = "overworld.animation"\noverworld_texture_path = "overworld.png"\nmugshot_texture_path = "mug.png"\nmugshot_animation_path = "mug.animation"\nemotions_texture_path = "" # optional\nemotions_animation_path = "" # optional\n\n# this section is optional, see the Battle section for an example\n[defines]\ncharacters = []\n\n# this section is optional\n[dependencies]\naugments = [] # optional, list of package ids\nencounters = [] # optional, list of package ids\ncards = [] # optional, list of package ids, must also depend on defining package\ncharacters = [] # optional, list of package ids\nlibraries = [] # optional, list of package ids\nstatuses = [] # optional, list of package ids\ntile_states = [] # optional, list of package ids\n')),(0,i.kt)("p",null,"Expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"entry.lua")," file. See ",(0,i.kt)("a",{parentName:"p",href:"/client/lua-api/entity-api/player"},"Player")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"---@param player Entity\nfunction player_init(player)\nend\n")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.toml")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\ncategory = "resource" # must match\nid = "com.example.resource" # must be unique\npast_ids = [] # optional, list of strings\nname = "Example Resource Package"\ndescription = "Example Resource Package"\nlong_description = "" # optional\npreview_texture_path = "preview.png" # optional\n')),(0,i.kt)("p",null,"Expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"resources")," folder. Files in this package's ",(0,i.kt)("inlineCode",{parentName:"p"},"resources")," folder will override files in the program's ",(0,i.kt)("inlineCode",{parentName:"p"},"resources")," folder when enabled."))}u.isMDXComponent=!0}}]);