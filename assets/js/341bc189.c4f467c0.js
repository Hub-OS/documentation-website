"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[811],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,v=u["".concat(p,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(v,i(i({ref:t},d),{},{components:n})):a.createElement(v,i({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={},i="Server Events",o={unversionedId:"server/lua-api/events",id:"server/lua-api/events",title:"Server Events",description:"Positions are in tile space. To get the center of a tile add 0.5",source:"@site/docs/02-server/04-lua-api/03-events.md",sourceDirName:"02-server/04-lua-api",slug:"/server/lua-api/events",permalink:"/documentation-website/server/lua-api/events",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"serverSidebar",previous:{title:"Event Emitters",permalink:"/documentation-website/server/lua-api/event-emitters"},next:{title:"Areas",permalink:"/documentation-website/server/lua-api/areas"}},p={},s=[{value:"<code>tick</code>",id:"tick",level:3},{value:"<code>player_request</code>",id:"player_request",level:3},{value:"<code>player_connect</code>",id:"player_connect",level:3},{value:"<code>player_join</code>",id:"player_join",level:3},{value:"<code>player_area_transfer</code>",id:"player_area_transfer",level:3},{value:"<code>player_disconnect</code>",id:"player_disconnect",level:3},{value:"<code>player_move</code>",id:"player_move",level:3},{value:"<code>player_augment</code>",id:"player_augment",level:3},{value:"<code>player_avatar_change</code>",id:"player_avatar_change",level:3},{value:"<code>player_emote</code>",id:"player_emote",level:3},{value:"<code>custom_warp</code>",id:"custom_warp",level:3},{value:"<code>object_interaction</code>",id:"object_interaction",level:3},{value:"<code>actor_interaction</code>",id:"actor_interaction",level:3},{value:"<code>tile_interaction</code>",id:"tile_interaction",level:3},{value:"<code>textbox_response</code>",id:"textbox_response",level:3},{value:"<code>board_open</code>",id:"board_open",level:3},{value:"<code>board_close</code>",id:"board_close",level:3},{value:"<code>post_request</code>",id:"post_request",level:3},{value:"<code>post_selection</code>",id:"post_selection",level:3},{value:"<code>shop_leave</code>",id:"shop_leave",level:3},{value:"<code>shop_close</code>",id:"shop_close",level:3},{value:"<code>shop_purchase</code>",id:"shop_purchase",level:3},{value:"<code>shop_description_request</code>",id:"shop_description_request",level:3},{value:"<code>battle_results</code>",id:"battle_results",level:3},{value:"<code>server_message</code>",id:"server_message",level:3},{value:"<code>authorization</code>",id:"authorization",level:3}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"server-events"},"Server Events"),(0,r.kt)("p",null,"Positions are in tile space. To get the center of a tile add ",(0,r.kt)("inlineCode",{parentName:"p"},"0.5")),(0,r.kt)("h3",{id:"tick"},(0,r.kt)("inlineCode",{parentName:"h3"},"tick")),(0,r.kt)("p",null,"Emits 20 times per second."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("tick", function(event)\n  -- { delta_time: number (seconds) }\n  print(event.delta_time)\nend)\n')),(0,r.kt)("h3",{id:"player_request"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_request")),(0,r.kt)("p",null,"Emits when the player requests connection to the server. It is the first event seen by scripts for a player's connection."),(0,r.kt)("p",null,"Only transfers and kicks should occur in listeners for this event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_request", function(event)\n  -- { player_id: string, data: string }\n  print(event.player_id, event.data)\nend)\n')),(0,r.kt)("h3",{id:"player_connect"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_connect")),(0,r.kt)("p",null,"Emits when the player connects to the server (good place to setup while the player is loading)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_connect", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"player_join"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_join")),(0,r.kt)("p",null,"Emits when the player enters their first area after connecting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_join", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"player_area_transfer"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_area_transfer")),(0,r.kt)("p",null,"Emits when the player changes area."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_area_transfer", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"player_disconnect"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_disconnect")),(0,r.kt)("p",null,"The player is invalid after this function executes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_disconnect", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"player_move"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_move")),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Net.get_player_position(event.player_id)")," within the listener will report the player's old position, as the player's position is updated after the event is emitted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_move", function(event)\n  -- { player_id: string, x: number, y: number, z: number }\n  print(event.player_id, event.x, event.y, event.z)\nend)\n')),(0,r.kt)("h3",{id:"player_augment"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_augment")),(0,r.kt)("p",null,"The player's base health and max health will be updated on the player before this event emits."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_augment", function(event)\n  -- { player_id: string, augments: { id: string }[] }\n  print(event.player_id, event)\nend)\n')),(0,r.kt)("h3",{id:"player_avatar_change"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_avatar_change")),(0,r.kt)("p",null,"The player's health, base health, max health, and element will be updated on the player before this function executes.\n",(0,r.kt)("inlineCode",{parentName:"p"},"prevent_default")," blocks texture and animation change from being visible to other clients."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_avatar_change", function(event)\n  -- { player_id: string, texture_path: string, animation_path: string, prevent_default: Function }\n  print(event.player_id, event)\nend)\n')),(0,r.kt)("h3",{id:"player_emote"},(0,r.kt)("inlineCode",{parentName:"h3"},"player_emote")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("player_emote", function(event)\n  -- { player_id: string, emote: number, prevent_default: Function }\n  print(event.player_id, event.emote)\nend)\n')),(0,r.kt)("h3",{id:"custom_warp"},(0,r.kt)("inlineCode",{parentName:"h3"},"custom_warp")),(0,r.kt)("p",null,'Player warped out by a "Custom Warp" or "Custom Server Warp".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("custom_warp", function(event)\n  -- { player_id: string, object_id: number }\n  print(event.player_id, event.object_id)\nend)\n')),(0,r.kt)("h3",{id:"object_interaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"object_interaction")),(0,r.kt)("p",null,"The player has pressed the Interact button on an Object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("object_interaction", function(event)\n  -- { player_id: string, object_id: number, button: number }\n  print(event.player_id, event.object_id, event.button)\nend)\n')),(0,r.kt)("h3",{id:"actor_interaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"actor_interaction")),(0,r.kt)("p",null,"The player has pressed the Interact button on another Player or Bot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("actor_interaction", function(event)\n  -- { player_id: string, actor_id: string, button: number }\n  -- actor_id is a player or bot id\n  print(event.player_id, event.actor_id, event.button)\nend)\n')),(0,r.kt)("h3",{id:"tile_interaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"tile_interaction")),(0,r.kt)("p",null,"The player has pressed the Interact button with no Actor or Object in range."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("tile_interaction", function(event)\n  -- { player_id: string, x: number, y: number, z: number, button: number }\n  print(event.player_id, event.x, event.y, event.z, event.button)\nend)\n')),(0,r.kt)("h3",{id:"textbox_response"},(0,r.kt)("inlineCode",{parentName:"h3"},"textbox_response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("textbox_response", function(event)\n  -- { player_id: string, response: number | string }\n  print(event.player_id, event.response)\nend)\n')),(0,r.kt)("h3",{id:"board_open"},(0,r.kt)("inlineCode",{parentName:"h3"},"board_open")),(0,r.kt)("p",null,"Deprecated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("board_open", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"board_close"},(0,r.kt)("inlineCode",{parentName:"h3"},"board_close")),(0,r.kt)("p",null,"The board menu has closed from either another menu opening or the player pressing the Cancel button."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("board_close", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"post_request"},(0,r.kt)("inlineCode",{parentName:"h3"},"post_request")),(0,r.kt)("p",null,"Client has exhausted board posts and is requesting more posts. Useful for implementing infinite scroll."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("post_request", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"post_selection"},(0,r.kt)("inlineCode",{parentName:"h3"},"post_selection")),(0,r.kt)("p",null,"The player has pressed the Confirm button on a board post. A custom response using textboxes is expected, but optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("post_selection", function(event)\n  -- { player_id: string, post_id: string }\n  print(event.player_id, event.post_id)\nend)\n')),(0,r.kt)("h3",{id:"shop_leave"},(0,r.kt)("inlineCode",{parentName:"h3"},"shop_leave")),(0,r.kt)("p",null,"The player has pressed the Cancel button in the shop menu. A custom message using ",(0,r.kt)("a",{parentName:"p",href:"/docs/server/lua-api/widgets#netset_shop_messageplayer_id-message"},"Net.set_shop_message()")," is expected, but optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("shop_leave", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"shop_close"},(0,r.kt)("inlineCode",{parentName:"h3"},"shop_close")),(0,r.kt)("p",null,"The shop menu has closed from either another menu opening or completing leave."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("shop_close", function(event)\n  -- { player_id: string }\n  print(event.player_id)\nend)\n')),(0,r.kt)("h3",{id:"shop_purchase"},(0,r.kt)("inlineCode",{parentName:"h3"},"shop_purchase")),(0,r.kt)("p",null,"The player has pressed the Confirm button on a shop item. A custom response using textboxes is expected, but optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("shop_purchase", function(event)\n  -- { player_id: string, item_id: string }\n  print(event.player_id, event.item_id)\nend)\n')),(0,r.kt)("h3",{id:"shop_description_request"},(0,r.kt)("inlineCode",{parentName:"h3"},"shop_description_request")),(0,r.kt)("p",null,"The player has pressed the Info button on a shop item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("shop_description_request", function(event)\n  -- { player_id: string, item_id: string }\n  print(event.player_id, event.item_id)\nend)\n')),(0,r.kt)("h3",{id:"battle_results"},(0,r.kt)("inlineCode",{parentName:"h3"},"battle_results")),(0,r.kt)("p",null,"Emits after a player leaves any server sent battle, regardless of winning, losing, or running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("battle_results", function(event)\n  --[[\n    {\n      player_id: string,\n      health: number,\n      score: number,\n      time: number,\n      ran: bool,\n      emotion: number,\n      turns: number,\n      allies: { name: String, health: number }[],\n      enemies: { name: String, health: number }[],\n      neutral: { name: String, health: number }[],\n    }\n  ]]--\n  print(event.player_id, event.health, event.time, event.ran, event.emotion, event.turns, event.enemies)\nend)\n')),(0,r.kt)("h3",{id:"server_message"},(0,r.kt)("inlineCode",{parentName:"h3"},"server_message")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("server_message", function(event)\n  -- { host: string, data: string }\n  print(event.host, event.data)\nen\n')),(0,r.kt)("h3",{id:"authorization"},(0,r.kt)("inlineCode",{parentName:"h3"},"authorization")),(0,r.kt)("p",null,"A player on another server needs to be authenticated with this server, caused by a server calling ",(0,r.kt)("a",{parentName:"p",href:"/docs/server/lua-api/players#netrequest_authorizationplayer_id-address-data"},"Net.request_authorization()"),"."),(0,r.kt)("p",null,"The host for the other server is provided with the event for custom response / implementation."),(0,r.kt)("p",null,"Do NOT share identity with other servers, use data for a temporary link between identities without sharing the identity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Net:on("authorization", function(event)\n  -- { identity: string, host: string, data: string }\n  print(event.identity, event.host, event.data)\nend)\n')))}c.isMDXComponent=!0}}]);