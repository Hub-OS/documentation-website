"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[863],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(y,s(s({ref:n},c),{},{components:t})):a.createElement(y,s({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={},s="Async",o={unversionedId:"server/lua-api/async",id:"server/lua-api/async",title:"Async",description:"If you want to use IO while players are connected, you'll want to use the Async API to prevent server hiccups.",source:"@site/docs/02-server/04-lua-api/13-async.md",sourceDirName:"02-server/04-lua-api",slug:"/server/lua-api/async",permalink:"/server/lua-api/async",draft:!1,editUrl:"https://github.com/Hub-OS/documentation-website/tree/master/docs/02-server/04-lua-api/13-async.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"serverSidebar",previous:{title:"Synchronization",permalink:"/server/lua-api/synchronization"},next:{title:"Breaking Changes",permalink:"/server/breaking-changes"}},l={},p=[{value:"Promises",id:"promises",level:2},{value:"<code>Async.create_promise(function(resolve))</code>",id:"asynccreate_promisefunctionresolve",level:3},{value:"<code>Async.await(promise)</code>",id:"asyncawaitpromise",level:3},{value:"<code>Async.await(async_iterator)</code>",id:"asyncawaitasync_iterator",level:3},{value:"<code>Async.await_all(promises)</code>",id:"asyncawait_allpromises",level:3},{value:"<code>Async.create_scope(function())</code>",id:"asynccreate_scopefunction",level:3},{value:"<code>Async.create_function(function(...))</code>",id:"asynccreate_functionfunction",level:3},{value:"<code>Async.request(url, { method?, headers?, body? }?)</code>",id:"asyncrequesturl--method-headers-body-",level:3},{value:"<code>Async.download(path, url, { method?, headers?, body? }?)</code>",id:"asyncdownloadpath-url--method-headers-body-",level:3},{value:"<code>Async.read_file(path)</code>",id:"asyncread_filepath",level:3},{value:"<code>Async.write_file(path, content)</code>",id:"asyncwrite_filepath-content",level:3},{value:"<code>Async.poll_server(address)</code>",id:"asyncpoll_serveraddress",level:3},{value:"<code>Async.message_server(address, data)</code>",id:"asyncmessage_serveraddress-data",level:3},{value:"<code>Async.sleep(seconds)</code>",id:"asyncsleepseconds",level:3},{value:"<code>Async.message_player(player_id, message, mug_texture_path?, mug_animation_path?)</code>",id:"asyncmessage_playerplayer_id-message-mug_texture_path-mug_animation_path",level:3},{value:"<code>Async.question_player(player_id, question, mug_texture_path?, mug_animation_path?)</code>",id:"asyncquestion_playerplayer_id-question-mug_texture_path-mug_animation_path",level:3},{value:"<code>Async.quiz_player(player_id, option_a?, option_b?, option_c?, mug_texture_path?, mug_animation_path?)</code>",id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-mug_texture_path-mug_animation_path",level:3},{value:"<code>Async.prompt_player(player_id, character_limit?, default_text?)</code>",id:"asyncprompt_playerplayer_id-character_limit-default_text",level:3},{value:"<code>Async.initiate_encounter(player_id, package_path, data?)</code>",id:"asyncinitiate_encounterplayer_id-package_path-data",level:3},{value:"<code>Async.initiate_pvp(player_1_id, player_2_id, package_path?, data?)</code>",id:"asyncinitiate_pvpplayer_1_id-player_2_id-package_path-data",level:3},{value:"<code>Async.initiate_netplay(player_ids, package_path?, data?)</code>",id:"asyncinitiate_netplayplayer_ids-package_path-data",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"async"},"Async"),(0,r.kt)("p",null,"If you want to use IO while players are connected, you'll want to use the Async API to prevent server hiccups.\nNote: paths in this section use system paths and not asset paths."),(0,r.kt)("h2",{id:"promises"},"Promises"),(0,r.kt)("p",null,"A promise is just a table that has an ",(0,r.kt)("inlineCode",{parentName:"p"},"and_then")," function, which accepts another function that can be called in the future. Most async functions will return a promise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Lua"},"promise.and_then(function(value)\n  print(value)\nend)\n")),(0,r.kt)("h3",{id:"asynccreate_promisefunctionresolve"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.create_promise(function(resolve))")),(0,r.kt)("p",null,"Returns a promise from a callback. A resolve function is passed to this callback, which calls functions passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"and_then")),(0,r.kt)("p",null,"This promise supports late calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"and_then")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local promise = Async.create_promise(function(resolve)\n  resolve(1, 2, 3)\nend)\n\npromise.and_then(print) -- outputs "1 2 3"\n')),(0,r.kt)("h3",{id:"asyncawaitpromise"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.await(promise)")),(0,r.kt)("p",null,"Can only be used within an async scope or coroutine."),(0,r.kt)("p",null,"Waits for a promise by providing a function to and_then and yielding until the function is called."),(0,r.kt)("p",null,"Returns the value passed by and_then"),(0,r.kt)("h3",{id:"asyncawaitasync_iterator"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.await(async_iterator)")),(0,r.kt)("p",null,"Retruns an iterator from an async iterator (an iterator which returns promises)."),(0,r.kt)("p",null,"Can only be used within a coroutine. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Async.promisify()")," to let the server handle resuming the coroutine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- example with Async.await(async_iterator)\nlocal shop_items = {\n  { name = "a", price = 0 },\n  { name = "b", price = 0 }\n}\n\nNet:on("player_join", Async.create_function(function(event)\n  local emitter = Net.open_shop(event.player_id, )\n\n  -- events are automatically awaited\n  for event in Async.await(emitter:async_iter("shop_purchase")) do\n    print(event)\n  end\nend))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- example without Async.await(async_iterator)\nlocal shop_items = {\n  { name = "a", price = 0 },\n  { name = "b", price = 0 }\n}\n\nNet:on("player_join", Async.create_function(function(event)\n  local emitter = Net.open_shop(event.player_id)\n\n  for promise in emitter:async_iter("shop_purchase") do\n    -- each event must be awaited individually\n    local event = Async.await(promise)\n    print(event)\n  end\nend))\n')),(0,r.kt)("h3",{id:"asyncawait_allpromises"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.await_all(promises)")),(0,r.kt)("p",null,"Can only be used within an async scope or coroutine."),(0,r.kt)("p",null,"Takes a list of promises and returns a list of values."),(0,r.kt)("h3",{id:"asynccreate_scopefunction"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.create_scope(function())")),(0,r.kt)("p",null,"Returns a promise, resolves to the return value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local promise = Async.create_scope(function()\n  Async.await(Async.sleep(5))\n\n  return "hi"\nend)\n\npromise.and_then(print) -- says "hi" after 5s\n')),(0,r.kt)("h3",{id:"asynccreate_functionfunction"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.create_function(function(...))")),(0,r.kt)("p",null,"Returns a function that returns a promise, which resolves to the return value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local say_after = Async.create_function(function(message, delay)\n  Async.await(Async.sleep(delay)))\n\n  return message\nend)\n\nsay_after("hello", 5).and_then(print) -- says "hello" after 5s\nsay_after("world", 10).and_then(print) -- says "world" after 10s\n')),(0,r.kt)("h3",{id:"asyncrequesturl--method-headers-body-"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.request(url, { method?, headers?, body? }?)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"{ status, headers, body }?")),(0,r.kt)("h3",{id:"asyncdownloadpath-url--method-headers-body-"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.download(path, url, { method?, headers?, body? }?)")),(0,r.kt)("p",null,"Downloads a file straight to disk."),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the file was successfully saved, or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if the operation failed."),(0,r.kt)("h3",{id:"asyncread_filepath"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.read_file(path)")),(0,r.kt)("p",null,"Returns a promise that resolves to a string representing the bytes stored in the file."),(0,r.kt)("p",null,"An empty string is returned if reading failed."),(0,r.kt)("h3",{id:"asyncwrite_filepath-content"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.write_file(path, content)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the file was successfully saved, or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if the operation failed."),(0,r.kt)("h3",{id:"asyncpoll_serveraddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.poll_server(address)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"{}?")),(0,r.kt)("h3",{id:"asyncmessage_serveraddress-data"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.message_server(address, data)")),(0,r.kt)("p",null,"You will not know if this succeeds, the other server will need to reply. See ",(0,r.kt)("a",{parentName:"p",href:"/server/lua-api/events#server_message"},"server_message"),"."),(0,r.kt)("h3",{id:"asyncsleepseconds"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.sleep(seconds)")),(0,r.kt)("p",null,"Returns a promise that resolves after the duration has passed."),(0,r.kt)("h3",{id:"asyncmessage_playerplayer_id-message-mug_texture_path-mug_animation_path"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.message_player(player_id, message, mug_texture_path?, mug_animation_path?)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,r.kt)("h3",{id:"asyncquestion_playerplayer_id-question-mug_texture_path-mug_animation_path"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.question_player(player_id, question, mug_texture_path?, mug_animation_path?)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," for yes, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," for no, and ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,r.kt)("h3",{id:"asyncquiz_playerplayer_id-option_a-option_b-option_c-mug_texture_path-mug_animation_path"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.quiz_player(player_id, option_a?, option_b?, option_c?, mug_texture_path?, mug_animation_path?)")),(0,r.kt)("p",null,"Returns a promise that resolves to 0-2 for option a-c, or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,r.kt)("h3",{id:"asyncprompt_playerplayer_id-character_limit-default_text"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.prompt_player(player_id, character_limit?, default_text?)")),(0,r.kt)("p",null,"Returns a promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," for disconnected."),(0,r.kt)("h3",{id:"asyncinitiate_encounterplayer_id-package_path-data"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.initiate_encounter(player_id, package_path, data?)")),(0,r.kt)("p",null,"Returns a promise that resolves to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"{\n  player_id: string,\n  health: number,\n  score: number,\n  time: number,\n  ran: bool,\n  emotion: number,\n  turns: number,\n  allies: { name: String, health: number }[],\n  enemies: { name: String, health: number }[],\n  neutral: { name: String, health: number }[],\n}?\n")),(0,r.kt)("h3",{id:"asyncinitiate_pvpplayer_1_id-player_2_id-package_path-data"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.initiate_pvp(player_1_id, player_2_id, package_path?, data?)")),(0,r.kt)("p",null,"Returns a promise that resolves to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"{\n  player_id: string,\n  health: number,\n  score: number,\n  time: number,\n  ran: bool,\n  emotion: number,\n  turns: number,\n  allies: { name: String, health: number }[],\n  enemies: { name: String, health: number }[],\n  neutral: { name: String, health: number }[],\n}?\n")),(0,r.kt)("h3",{id:"asyncinitiate_netplayplayer_ids-package_path-data"},(0,r.kt)("inlineCode",{parentName:"h3"},"Async.initiate_netplay(player_ids, package_path?, data?)")),(0,r.kt)("p",null,"Returns a promise that resolves to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"{\n  player_id: string,\n  health: number,\n  score: number,\n  time: number,\n  ran: bool,\n  emotion: number,\n  turns: number,\n  allies: { name: String, health: number }[],\n  enemies: { name: String, health: number }[],\n  neutral: { name: String, health: number }[],\n}?\n")))}d.isMDXComponent=!0}}]);